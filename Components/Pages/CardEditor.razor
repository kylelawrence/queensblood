@page "/cards"
@rendermode InteractiveServer
@inject ICardsService cardsService;

<div class="container">
	<div class="left">
		<div class="cardset">
			<label>
				Card set:
				<InputSelect @bind-Value="selectedCardSet">
					@foreach (var set in cardSets)
					{
						<option>@set</option>
					}
				</InputSelect>
			</label>
			<button class="refresh" @onclick="OnInitialized">&#8635;</button>
			<button class="save" @onclick="HandleSaveIterationClick">Save new iteration</button>
		</div>
		<div class="cards">
			@foreach (var card in selectedCardSet.Cards)
			{
				var selected = currentCard == card;
				<CardView CardModel="@card" OnClick="HandleCardClick" Selected="@selected" />
			}
			<button class="new @(this.MaybeClass("selected", currentCardIndex == NEW_INDEX))" @onclick="HandleNewClick">
				<div>+</div>
			</button>
		</div>
	</div>
	<div class="right">
		@if (currentCardIndex == NULL_INDEX)
		{
			<div style="text-align: center">
				Choose a card to edit
				<br />
				or
				<br />
				create a new one
			</div>
		}
		else
		{
			<div class="editor">
				<div class="separate">
					<div>
						<input type="button" value="-" @onclick="HandlePinCostDecrease" />
						<input type="button" value="+" @onclick="HandlePinCostIncrease" />
					</div>
					<input type="button" value="change image" />
					<div>
						<input type="button" value="-" @onclick="HandleValueDecrease" />
						<input type="button" value="+" @onclick="HandleValueIncrease" />
					</div>
				</div>
				<div class="grow">
					<CardView CardModel="@currentCard" />
				</div>
				<div class="separate">
					<span>Name</span>
					<InputText class="grow" @bind-Value="currentName" />
				</div>
				<div class="separate">
					<div></div>
					<input type="button" value="Save" @onclick="HandleSaveCardClick" />
				</div>
			</div>
		}
	</div>
</div>

@code {
	private const int NULL_INDEX = -2;
	private const int NEW_INDEX = -1;

	private string currentName
	{
		get => currentCard.Name;
		set
		{
			UpdateCard(value);
			StateHasChanged();
		}
	}

	private Card currentCard = Card.Null;

	private int currentCardIndex = NULL_INDEX;

	private ReadOnlyCollection<CardSet> cardSets = new List<CardSet>().AsReadOnly();
	private CardSet selectedCardSet = CardSet.Empty;

	protected override void OnInitialized()
	{
		cardSets = cardsService.GetCardSets();
		selectedCardSet = cardSets[0];
		StateHasChanged();
	}

	private void HandleNewClick()
	{
		currentCard = Card.New;
		currentCardIndex = NEW_INDEX;
		StateHasChanged();
	}

	private void HandleCardClick(Card card)
	{
		currentCard = card;
		StateHasChanged();
	}

	private async Task HandleSaveIterationClick(MouseEventArgs e)
	{
		await Task.FromResult(true);
	}

	private void HandlePinCostDecrease() => UpdateCard(pinCost: currentCard.PinCost - 1);
	private void HandlePinCostIncrease() => UpdateCard(pinCost: currentCard.PinCost + 1);
	private void HandleValueDecrease() => UpdateCard(value: currentCard.Value - 1);
	private void HandleValueIncrease() => UpdateCard(value: currentCard.Value + 1);

	private void UpdateCard(string name = "", int pinCost = 0, int value = 0)
	{
		CardHelper.Change(ref currentCard, name, pinCost, value);
		StateHasChanged();
	}

	private void HandleSaveCardClick()
	{
		StateHasChanged();
	}
}