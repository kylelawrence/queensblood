@page "/debug"
@inherits GameWatcher
<div class="container">
    <FieldGrid Field="Field" OnFieldClick="HandleFieldClick" GetRowScore="GetRowScore"
        GetOpponentRowScore="GetOpponentRowScore" CurrentPlayerType="CurrentPlayerType" />
    <div class="opponent-container">
        Play as opponent
        <label class="switch">
            <input type="checkbox" @onchange="HandleOpponentChange">
            <span class="slider round"></span>
        </label>
    </div>
    <div class="all-cards">
        @for (var i = 0; i < Cards.Count; i++)
        {
            var index = i;
            var card = Cards.At(i);
            var onClick = (Card _) => HandleCardClick(index);
            var selected = CurrentSelectedIndex == index;
            <div class="card-holder">
                <CardView CardModel="@card" OnClick="onClick" Selected="selected" />
            </div>
        }
    </div>
</div>

@code {
    private PlayerType CurrentPlayerType = PlayerType.Player1;
    private Field Field = Field.None;
    private int CurrentSelectedIndex = -1;
    private bool IsOpponent = false;

    private string GetRowScore(FieldRow row)
    {
        int score = CurrentPlayerType == PlayerType.Player1 ? row.Player1Score : row.Player2Score;
        return score > 0 ? score.ToString() : "";
    }

    private string GetOpponentRowScore(FieldRow row)
    {
        int score = CurrentPlayerType == PlayerType.Player1 ? row.Player2Score : row.Player1Score;
        return score > 0 ? score.ToString() : "";
    }

    protected override void OnInitialized()
    {
        this.Game = Game.CreateDebug();
        this.Game.Join("debug2");
        this.Field = Game.GetField(PlayerType.Player1);
    }

    private void HandleFieldClick(int rowIndex, int cellIndex)
    {
        if (CurrentSelectedIndex == -1) return;
        var card = Cards.At(CurrentSelectedIndex)!;
        if (IsOpponent)
        {
            Game.DebugOpponentPlayCard(card, rowIndex, cellIndex);
        }
        else
        {
            Game.DebugPlayCard(card, rowIndex, cellIndex);
        }
    }

    private void HandleCardClick(int index)
    {
        if (CurrentSelectedIndex == index)
        {
            CurrentSelectedIndex = -1;
        }
        else
        {
            CurrentSelectedIndex = index;
        }

        StateHasChanged();
    }

    private void HandleOpponentChange(ChangeEventArgs e)
    {
        IsOpponent = e.Value as bool? ?? false;
        //CurrentPlayerType = isChecked ? PlayerType.Player2 : PlayerType.Player1;
        //Field = Game.GetField(CurrentPlayerType);
        StateHasChanged();
    }
}