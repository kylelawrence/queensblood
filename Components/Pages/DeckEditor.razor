@page "/decks"
@inject ICardsService cardsService
@inject IDecksService decksService

<PageTitle>Queen's Blood - Manage Decks</PageTitle>

<div class="decks-container">
    <div class="decks-header">
        <span>Your decks:</span>
        <DeckSelectButtons SelectedDeck="@currentDeckIndex" OnDeckClicked="@HandleDeckSelectClick" />
        <span>Cards: @GetCurrentDeckCardCount() / 15</span>
        <button type="button" class="save" @onclick="HandleSaveClick">Save deck</button>
    </div>

    <div class="active-deck">
        @foreach (var pair in currentDeckCards)
        {
            var card = cards[pair.Key];
            <div class="card-holder">
                <CardView CardModel="@card" OnClick="(Card _) => HandleRemoveCardClick(pair.Key)" />
                <div>@pair.Value/2</div>
            </div>
        }
    </div>

    <div class="all-cards">
        @for (var i = 0; i < cards.Count; i++)
        {
            var index = i;
            var card = cards[i];
            var usedCount = 0;
            currentDeckCards.TryGetValue(index, out usedCount);
            var count = 2 - usedCount;
            <div class="card-holder">
                <CardView CardModel="@card" OnClick="(Card _) => HandleAddCardClick(index)" />
                <div>@count/2</div>
            </div>
        }
    </div>
</div>

@code {
    private int currentDeckIndex = -1;
    private SortedList<int, int> currentDeckCards = [];
    private ReadOnlyCollection<Card> cards = new([]);

    protected override void OnInitialized()
    {
        cards = cardsService.Cards;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        var selectedDeck = await decksService.GetSelectedDeck();
        await HandleDeckSelectClick(selectedDeck);
    }

    private async Task HandleDeckSelectClick(int index)
    {
        var deck = await decksService.LoadDeck(index);

        currentDeckIndex = index;
        currentDeckCards = new();
        foreach (var card in deck.cards)
        {
            // Clamp values of cards
            if (card.index < 0 || card.index >= cards.Count) continue;
            currentDeckCards.Add(card.index, Math.Clamp(card.count, 1, 2));
        }
        StateHasChanged();
    }

    private async Task HandleSaveClick()
    {
        if (currentDeckIndex < 0) return;

        var cards = currentDeckCards.Select((pair) => new DeckCard(pair.Key, pair.Value));
        await decksService.SaveDeck(currentDeckIndex, cards.ToArray());
    }

    private void HandleAddCardClick(int index)
    {
        if (currentDeckIndex < 0) return;
        if (GetCurrentDeckCardCount() >= 15) return;

        int count = 0;
        if (currentDeckCards.TryGetValue(index, out count))
        {
            if (count < 2)
            {
                currentDeckCards[index] = 2;
            }
        }
        else
        {
            currentDeckCards.Add(index, 1);
        }
        StateHasChanged();
    }

    private void HandleRemoveCardClick(int index)
    {
        if (currentDeckIndex < 0) return;

        int count = 0;
        if (currentDeckCards.TryGetValue(index, out count))
        {
            if (count >= 2)
            {
                currentDeckCards[index] = 1;
            }
            else
            {
                currentDeckCards.Remove(index);
            }
        }
        StateHasChanged();
    }

    private int GetCurrentDeckCardCount()
    {
        return currentDeckCards.Sum((pair) => pair.Value);
    }
}