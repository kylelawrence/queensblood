@page "/decks"
@rendermode InteractiveServer
@inject ICardsService cardsService
@inject IJSRuntime JS

<PageTitle>Queen's Blood - Manage Decks</PageTitle>

<div class="decks-container">
    <div class="decks-header">
        <span>Your decks:</span>
        @for (var i = 0; i < 5; i += 1)
        {
            var index = i;
            var label = i + 1;
            <button type="button" class="deck-select-button @this.MaybeClass("selected", currentDeckIndex == index)"
                @onclick="() => HandleDeckSelectClick(index)">
                @label
            </button>
        }
        <label>
            <span>Deck nickname:</span>
            <InputText class="deck-name-input" @bind-Value="currentDeckName" />
        </label>
        <button type="button" class="save" @onclick="HandleSaveClick">Save deck</button>
    </div>

    <div class="active-deck">
        @foreach (var pair in currentDeckCards)
        {
            var card = cardSet.Cards[pair.Key];
            <div class="card-holder">
                <CardView CardModel="@card" OnClick="(Card _) => HandleRemoveCardClick(pair.Key)" />
                <div>@pair.Value/2</div>
            </div>
        }
    </div>

    <div class="all-cards">
        @for (var i = 0; i < cardSet.Cards.Count; i++)
        {
            var index = i;
            var card = cardSet.Cards[i];
            var usedCount = 0;
            currentDeckCards.TryGetValue(index, out usedCount);
            var count = 2 - usedCount;
            <div class="card-holder">
                <CardView CardModel="@card" OnClick="(Card _) => HandleAddCardClick(index)" />
                <div>@count/2</div>
            </div>
        }
    </div>
</div>

@code {
    private int currentDeckIndex = -1;
    private string currentDeckName = "";
    private SortedList<int, int> currentDeckCards = [];
    private CardSet cardSet = CardSet.Empty;

    protected override void OnInitialized()
    {
        cardSet = cardsService.GetLatestCardSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        int selectedDeck = 0;
        var result = await JS.InvokeAsync<string>("getSelectedDeck");
        int.TryParse(result, out selectedDeck);
        await HandleDeckSelectClick(selectedDeck);
    }

    private async Task HandleDeckSelectClick(int index)
    {
        var deck = await JS.InvokeAsync<Deck>("loadDeck", index);
        if (deck.name.Equals("!!ERROR!!")) return;

        if (deck.iteration == -1)
        {
            currentDeckIndex = index;
            currentDeckName = deck.name;
            currentDeckCards = [];
            StateHasChanged();
            return;
        }

        var cards = new SortedList<int, int>();
        foreach (var card in deck.cards)
        {
            cards.Add(card.index, card.count);
        }

        currentDeckIndex = index;
        currentDeckName = deck.name;
        currentDeckCards = cards;
        StateHasChanged();
    }

    private async Task HandleSaveClick()
    {
        var cards = currentDeckCards.Select((pair) => new DeckCard(pair.Key, pair.Value)).ToArray();
        var deck = new Deck(currentDeckName, cardSet.Iteration, cards);
        var result = await JS.InvokeAsync<bool>("saveDeck", currentDeckIndex, deck);
    }

    private void HandleAddCardClick(int index)
    {
        int count = 0;
        if (currentDeckCards.TryGetValue(index, out count))
        {
            if (count < 2)
            {
                currentDeckCards[index] = 2;
            }
        }
        else
        {
            currentDeckCards.Add(index, 1);
        }
        StateHasChanged();
    }

    private void HandleRemoveCardClick(int index)
    {
        int count = 0;
        if (currentDeckCards.TryGetValue(index, out count))
        {
            if (count >= 2)
            {
                currentDeckCards[index] = 1;
            }
            else
            {
                currentDeckCards.Remove(index);
            }
        }
        StateHasChanged();
    }
}