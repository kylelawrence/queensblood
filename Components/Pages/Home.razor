@page "/"
@rendermode InteractiveServer
@inject IPlayerService playerService
@inject IGamesService gamesService;

@using RNG = System.Security.Cryptography.RandomNumberGenerator

<PageTitle>Queen&#39;s Blood</PageTitle>

<div class="home-box">
    <h1 class="title">Queen&#39;s Blood</h1>
    <div class="controls-container">
        @if (existingGame.IsActive)
        {
            <form action="/play/@(existingGame.Id)" method="POST">
                <AntiforgeryToken />
                <button type="submit" class="mainlink">Continue game @(existingGame.Id)</button>
            </form>
            <form action="/forfeit/@(existingGame.Id)" method="POST">
                <AntiforgeryToken />
                <button type="submit" class="forfeit"><span>-&gt;</span> forfeit and start new <span>&lt;-</span></button>
            </form>
        }
        else
        {
            <form action="/play" method="POST">
                <AntiforgeryToken />
                <button type="submit" class="mainlink">Start new game</button>
            </form>
        }
        <a href="/decks" class="mainlink deckslink">Manage decks</a>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? context { get; set; }

    private string playerId = "";
    private Game existingGame = Game.None;

    protected override void OnInitialized()
    {
        if (context == null) return;

        playerId = playerService.EnsurePlayerId(context);
        existingGame = gamesService.FindGameByPlayerId(playerId);
        StateHasChanged();
    }
}