@page "/play/{GameId}"
@inject IGamesService gamesService
@inject NavigationManager navigation
@inject IPlayerIdAccessor playerIdAccessor

@if (NeedsToPickDeck())
{
    <DeckSelect OnStartGame="HandleStartGame" />
}
else
{
    <Playing Game="game" CurrentPlayerId="@playerId" CurrentPlayerType="@playerType" />
}

@code {
    [Parameter] public string GameId { get; set; } = "";

    private string playerId = "";
    private Game game = Game.None;
    private PlayerType playerType = PlayerType.Undecided;

    protected override void OnParametersSet()
    {
        game = gamesService.FindGameById(GameId);
        if (!game.IsActive)
        {
            navigation.NavigateTo("/");
            return;
        }

        playerId = playerIdAccessor.GetPlayerId();
        playerType = game.Join(playerId);
    }

    private bool NeedsToPickDeck()
    {
        if (playerType == PlayerType.Player1 && !game.Player1IsReady) return true;
        else if (playerType == PlayerType.Player2 && !game.Player2IsReady) return true;
        return false;
    }

    private void HandleStartGame(Deck deck)
    {
        if (!deck.IsValid) return;
        game.PickDeck(playerId, deck);
        StateHasChanged();
    }
}