@inherits GameWatcher
@inject NavigationManager navigationManager

<div style="flex-grow: 1; display: flex;">
    @if (Game.State == GameState.PickingDecks)
    {
        <div class="middle full-width">
            Waiting for other player...
        </div>
    }
    else
    {
        <div class="container">
            <div class="field-grid-container">
                <div class="field-grid">
                    @foreach (var row in Game.Field.Rows)
                    {
                        <div class="score cell">@GetRowScore(row)</div>
                        @foreach (var cell in row.GetCells(CurrentPlayerType))
                        {
                            var cellClass = $"cell c{row.RowIndex}{cell.ColumnIndex}";
                            var isOpponent = cell.Owner != CurrentPlayerType;
                            var opponentClass = this.MaybeClass("opponent", isOpponent);
                            if (cell.Owner == PlayerType.Undecided) opponentClass = "";

                            if (cell.CardId == -1)
                            {
                                var onClick = () => HandleFieldClick(cell);
                                <button type="button" class="@cellClass @opponentClass" @onclick="onClick">
                                    @for (var i = 0; i < cell.Pins; i++)
                                    {
                                        <span>!</span>
                                    }
                                </button>
                            }
                            else
                            {
                                var card = Cards.At(cell.CardId);
                                <FieldCardView CardModel="@card" IsOpponent="@isOpponent" />
                            }
                        }
                        <div class="score cell">@GetOpponentRowScore(row)</div>
                    }
                </div>
            </div>
            <div class="hands">
                <div class="hand">
                    @for (var i = 0; i < Hand.Count; i++)
                    {
                        var index = i;
                        var onClick = (Card _) => HandleCardClick(index);
                        var mulliganSelected = Game.State == GameState.Mulligan && IndexesSelectedForMulligan.Contains(index);
                        var playSelected = CurrentSelectedIndex == index;
                        var selected = mulliganSelected || playSelected;
                        <CardView CardModel="@Cards.At(Hand[index])" OnClick="onClick" Selected="selected" />
                    }
                </div>
            </div>
        </div>
        @if (Game.State == GameState.Mulligan)
        {
            @if (HasMulliganed)
            {
                <div class="middle center-label">
                    <div>Waiting for other player...</div>
                </div>
            }
            else
            {
                <div class="middle center-label">
                    <div>Mulligan - Pick cards to redraw</div>
                </div>
                <button type="button" class="mulligan-button" @onclick="HandleMulligan">Redraw cards and start game</button>
            }
        }
        else if (Game.State == GameState.GameOver)
        {
            var winner = Game.Winner;
            var label = "";
            if (winner == PlayerType.Undecided)
            {
                label = "Draw";
            }
            else if (CurrentPlayerType == PlayerType.Spectator)
            {
                label = winner == PlayerType.Player1 ? "Left won" : "Right won";
            }
            else
            {
                label = winner == CurrentPlayerType ? "You won" : "You lost";
            }

            <div class="middle center-label">
                <div>@label</div>
            </div>
        }
        else if (Game.State == GameState.Playing)
        {
            if (CurrentPlayerType == Game.PlayerTurn)
            {
                <div class="turn-label">
                    <div>Your turn</div>
                    @if(Game.PlayerHasSkipped)
                    {
                       <div>Your opponent has skipped.</div>
                       <div>If you skip, the game will end.</div> 
                    }
                    <button type="button" class="skip-button" @onclick="HandleSkip">@(skipClicked ? "Confirm?" : "Skip turn")</button>
                </div>
                if (!Game.HasAvailableCellToPlay(CurrentPlayerId))
                {
                    <div class="middle center-label">
                        <div>You have no cards you can play. Please skip.</div>
                    </div>
                }
            }
            else
            {
                <div class="turn-label">
                    Opponent's turn
                </div>
            }
        }
    }
    @if (Game.State != GameState.GameOver)
    {
        <button type="button" class="forfeit-button" @onclick="HandleForfeitClick">@(forfeitClicked ? "Confirm?" : "Forfeit")</button>
    }
</div>

@code {
    [Parameter] public string CurrentPlayerId { get; set; } = "";
    [Parameter] public PlayerType CurrentPlayerType { get; set; } = PlayerType.Undecided;

    private List<int> Hand = [];
    private List<int> IndexesSelectedForMulligan = [];
    private int CurrentSelectedIndex = -1;

    private bool skipClicked = false;
    private bool forfeitClicked = false;

    private string GetRowScore(FieldRow row) {
        int score = CurrentPlayerType == PlayerType.Player2 ? row.Player2Score : row.Player1Score;
        return score > 0 ? score.ToString() : "";
    }

    private string GetOpponentRowScore(FieldRow row) {
        int score = CurrentPlayerType == PlayerType.Player2 ? row.Player1Score : row.Player2Score;
        return score > 0 ? score.ToString() : "";
    }

    private bool HasMulliganed
    {
        get
        {
            return (CurrentPlayerType == PlayerType.Player1 && Game.Player1Mulliganed) ||
            (CurrentPlayerType == PlayerType.Player2 && Game.Player2Mulliganed);
        }
    }

    protected override void OnParametersSet()
    {
        Hand = Game.GetHand(CurrentPlayerId);
        StateHasChanged();
    }

    private void HandleCardClick(int index)
    {
        skipClicked = false;

        if (Game.State == GameState.Mulligan && !HasMulliganed)
        {
            if (IndexesSelectedForMulligan.Contains(index))
            {
                IndexesSelectedForMulligan.Remove(index);
            }
            else
            {
                IndexesSelectedForMulligan.Add(index);
            }
        }
        else if (Game.State == GameState.Playing && CurrentPlayerType == Game.PlayerTurn)
        {
            if (CurrentSelectedIndex == index)
            {
                CurrentSelectedIndex = -1;
            }
            else
            {
                CurrentSelectedIndex = index;
            }
        }
        
        StateHasChanged();
    }

    private void HandleMulligan()
    {
        if (HasMulliganed) return;

        var indexes = IndexesSelectedForMulligan.ToList();
        IndexesSelectedForMulligan.Clear();
        Game.Mulligan(CurrentPlayerId, indexes);
    }

    private void HandleFieldClick(FieldCell cell)
    {
        skipClicked = false;

        if (Game.State != GameState.Playing) return;
        if (CurrentPlayerType != Game.PlayerTurn) return;
        if (CurrentSelectedIndex == -1) return;
        
        var selectedIndex = CurrentSelectedIndex;
        CurrentSelectedIndex = -1;
        Game.PlayCard(CurrentPlayerId, selectedIndex, cell);
    }

    private void HandleSkip()
    {
        if (!skipClicked)
        {
            skipClicked = true;
            StateHasChanged();
            return;
        }

        Game.SkipTurn(CurrentPlayerId);
    }

    private void HandleForfeitClick()
    {
        if (!forfeitClicked)
        {
            forfeitClicked = true;
            StateHasChanged();
            return;
        }

        Game.Forfeit(CurrentPlayerId);
        navigationManager.NavigateTo("/");
    }
}